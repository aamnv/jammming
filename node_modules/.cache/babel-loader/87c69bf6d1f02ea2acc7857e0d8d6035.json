{"ast":null,"code":"let accessToken;\nconst clientID = '02e90f8fca6543a8beebe5ca56462a41';\nconst redirectURI = 'http://localhost:3000/';\nconst getAccessTokenURL = \"https://accounts.spotify.com/authorize?client_id=\".concat(clientID, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectURI);\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const URLToken = window.location.href.match(/access_token=([^&]*)/);\n    const tokenExpiration = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (URLToken && tokenExpiration) {\n      accessToken = URLToken[1];\n      const expires = Number(tokenExpiration[1]);\n      window.setTimeout(() => accessToken = '', expires * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessURL = \"https://accounts.spotify.com/authorize?client_id=\".concat(clientID, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectURI);\n      window.location = accessURL;\n    }\n  },\n\n  async search(term) {\n    accessToken = await Spotify.getAccessToken();\n\n    if (accessToken) {\n      const fetchURL = \"https://api.spotify.com/v1/search?type=track&q=\".concat(term);\n      const headerInfo = {\n        headers: {\n          Authorization: \"Bearer \".concat(accessToken)\n        }\n      };\n      return fetch(fetchURL, headerInfo).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n\n        throw new Error('Search request response failed!');\n      }, networkError => console.log(networkError.message)).then(jsonResponse => {\n        if (!jsonResponse.tracks) {\n          return [];\n        } else {\n          return jsonResponse.tracks.items.map(track => {\n            return {\n              id: track.id,\n              name: track.name,\n              artist: track.artists[0].name,\n              album: track.album.name,\n              uri: track.uri\n            };\n          });\n        }\n      });\n    } else {\n      console.log('Failure to get access token in search');\n    }\n  },\n\n  savePlayList(name, trackUris) {\n    if (!name || !trackUris || trackUris.length === 0) return;\n    const searchURL = 'https://api.spotify.com/v1/' + 'me';\n    const headers = {\n      Authorization: \"Bearer \".concat(accessToken)\n    };\n    let userID;\n    let playlistID;\n    fetch(searchURL, {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => userID = jsonResponse.id).then(() => {\n      const createPlaylistUrl = \"https://api.spotify.com/v1/users/\".concat(userID, \"/playlists\");\n      fetch(createPlaylistUrl, {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => playlistID = jsonResponse.id).then(() => {\n        const addPlaylistTracksUrl = \"https://api.spotify.com/v1/users/\".concat(userID, \"/playlists/\").concat(playlistID, \"/tracks\");\n        fetch(addPlaylistTracksUrl, {\n          method: 'POST',\n          headers: headers,\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/aamnv/js/reactjs/c-fdev/jammming/src/util/Spotify.js"],"names":["accessToken","clientID","redirectURI","getAccessTokenURL","Spotify","getAccessToken","URLToken","window","location","href","match","tokenExpiration","expires","Number","setTimeout","history","pushState","accessURL","search","term","fetchURL","headerInfo","headers","Authorization","fetch","then","response","ok","json","Error","networkError","console","log","message","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlayList","trackUris","length","searchURL","userID","playlistID","createPlaylistUrl","method","body","JSON","stringify","addPlaylistTracksUrl","uris"],"mappings":"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","sourcesContent":["let accessToken;\nconst clientID ='02e90f8fca6543a8beebe5ca56462a41';\nconst redirectURI = 'http://localhost:3000/';\nconst getAccessTokenURL = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`\n\n\nconst Spotify = {\n\n  getAccessToken() {\n    if(accessToken) {\n      return accessToken;\n    }\n    const URLToken = window.location.href.match(/access_token=([^&]*)/);\n    const tokenExpiration = window.location.href.match(/expires_in=([^&]*)/);\n    if (URLToken && tokenExpiration) {\n      accessToken = URLToken[1];\n      const expires = Number(tokenExpiration[1]);\n      window.setTimeout(()=> accessToken = '', expires * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessURL = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n      window.location = accessURL;\n    }\n  },\n\n  async search(term) {\n\n    accessToken = await Spotify.getAccessToken();\n\n    if (accessToken) {\n      const fetchURL = `https://api.spotify.com/v1/search?type=track&q=${term}`;\n      const headerInfo = {headers: {Authorization: `Bearer ${accessToken}`}};\n\n      return fetch(fetchURL, headerInfo)\n        .then(\n          response =>  {\n            if (response.ok) {\n              return response.json();\n            }\n            throw new Error('Search request response failed!');\n          }, networkError => console.log(networkError.message)\n        )\n        .then(\n           jsonResponse => {\n            if (!jsonResponse.tracks) {\n              return [];\n            } else {\n              return jsonResponse.tracks.items.map(track => {\n                return {\n                  id: track.id,\n                  name: track.name,\n                  artist: track.artists[0].name,\n                  album: track.album.name,\n                  uri: track.uri\n                }\n              });\n            }\n          }\n        )\n    }\n    else {\n      console.log('Failure to get access token in search');\n    }\n  },\n\n  savePlayList(name, trackUris) {\n      if (!name || !trackUris || trackUris.length === 0) return;\n      const searchURL = 'https://api.spotify.com/v1/' + 'me';\n      const headers = {\n        Authorization: `Bearer ${accessToken}`\n      };\n      let userID;\n      let playlistID;\n      fetch(searchURL, {\n        headers: headers\n      })\n      .then(response => response.json())\n      .then(jsonResponse => userID = jsonResponse.id)\n      .then(() => {\n        const createPlaylistUrl = `https://api.spotify.com/v1/users/${userID}/playlists`;\n        fetch(createPlaylistUrl, {\n            method: 'POST',\n            headers: headers,\n            body: JSON.stringify({\n              name: name\n            })\n          })\n          .then(response => response.json())\n          .then(jsonResponse => playlistID = jsonResponse.id)\n          .then(() => {\n            const addPlaylistTracksUrl = `https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`;\n            fetch(addPlaylistTracksUrl, {\n              method: 'POST',\n              headers: headers,\n              body: JSON.stringify({\n                uris: trackUris\n              })\n            });\n          })\n      })\n  }\n}\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}