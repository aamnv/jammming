{"ast":null,"code":"let accessToken;\nconst clientID = '02e90f8fca6543a8beebe5ca56462a41';\nconst redirectURI = 'http://localhost:3000/';\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const URLToken = window.location.href.match(/access_token=([^&]*)/);\n    const tokenExpiration = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (URLToken && tokenExpiration) {\n      accessToken = URLToken[1];\n      const expires = Number(tokenExpiration[1]);\n      window.setTimeout(() => accessToken = '', expires * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessURL = \"https://accounts.spotify.com/authorize?client_id=\".concat(clientID, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectURI);\n      window.location = accessURL;\n    }\n  },\n\n  async search(term) {\n    accessToken = Spotify.getAccessToken();\n    let response = await fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term), {\n      headers: {\n        Authorization: \"Bearer \".concat(accessToken)\n      }\n    });\n    let jsonResponse = await response.json();\n    let newTracks = [];\n    newTracks = jsonResponse.tracks.items.map(track => ({\n      id: track.id,\n      name: track.name,\n      artist: track.artists[0].name,\n      album: track.album.name,\n      uri: track.uri\n    }));\n    return newTracks;\n  },\n\n  savePlayList(name, trackUris) {\n    if (!name || !trackUris || trackUris.length === 0) return;\n    const searchURL = 'https://api.spotify.com/v1/me' + 'me';\n    const headers = {\n      Authorization: \"Bearer \".concat(accessToken)\n    };\n    let userID;\n    let playlistID;\n    fetch(searchURL, {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => userID = jsonResponse.id).then(() => {\n      const createPlaylistUrl = \"https://api.spotify.com/v1/users/\".concat(userID, \"/playlists\");\n      fetch(createPlaylistUrl, {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => playlistID = jsonResponse.id).then(() => {\n        const addPlaylistTracksUrl = \"https://api.spotify.com/v1/users/\".concat(userID, \"/playlists/\").concat(playlistID, \"/tracks\");\n        fetch(addPlaylistTracksUrl, {\n          method: 'POST',\n          headers: headers,\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/aamnv/js/reactjs/c-fdev/jammming/src/util/Spotify.js"],"names":["accessToken","clientID","redirectURI","Spotify","getAccessToken","URLToken","window","location","href","match","tokenExpiration","expires","Number","setTimeout","history","pushState","accessURL","search","term","response","fetch","headers","Authorization","jsonResponse","json","newTracks","tracks","items","map","track","id","name","artist","artists","album","uri","savePlayList","trackUris","length","searchURL","userID","playlistID","then","createPlaylistUrl","method","body","JSON","stringify","addPlaylistTracksUrl","uris"],"mappings":"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","sourcesContent":["let accessToken;\nconst clientID ='02e90f8fca6543a8beebe5ca56462a41';\nconst redirectURI = 'http://localhost:3000/';\n\n\nconst Spotify = {\n  getAccessToken() {\n    if(accessToken) {\n      return accessToken;\n    }\n    const URLToken = window.location.href.match(/access_token=([^&]*)/);\n    const tokenExpiration = window.location.href.match(/expires_in=([^&]*)/);\n    if (URLToken && tokenExpiration) {\n      accessToken = URLToken[1];\n      const expires = Number(tokenExpiration[1]);\n      window.setTimeout(()=> accessToken = '', expires * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessURL = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n      window.location = accessURL;\n    }\n  },\n\n  async search(term){\n    accessToken = Spotify.getAccessToken();\n    \n    let response = await fetch(`https://api.spotify.com/v1/search?type=track&q=${term}` ,\n        {\n          headers: {\n                      Authorization:`Bearer ${accessToken}`\n                   }\n        });\n\n    let jsonResponse = await response.json();\n    let newTracks= []\n\n    newTracks = jsonResponse.tracks.items.map(track =>(\n      {\n        id:track.id,\n        name:track.name,\n        artist:track.artists[0].name,\n        album:track.album.name,\n        uri:track.uri\n      }\n    ));\n    return newTracks;\n  },\n\n  savePlayList(name, trackUris) {\n      if (!name || !trackUris || trackUris.length === 0) return;\n      const searchURL = 'https://api.spotify.com/v1/me' + 'me';\n      const headers = {\n        Authorization: `Bearer ${accessToken}`\n      };\n      let userID;\n      let playlistID;\n      fetch(searchURL, {\n        headers: headers\n      })\n      .then(response => response.json())\n      .then(jsonResponse => userID = jsonResponse.id)\n      .then(() => {\n        const createPlaylistUrl = `https://api.spotify.com/v1/users/${userID}/playlists`;\n        fetch(createPlaylistUrl, {\n            method: 'POST',\n            headers: headers,\n            body: JSON.stringify({\n              name: name\n            })\n          })\n          .then(response => response.json())\n          .then(jsonResponse => playlistID = jsonResponse.id)\n          .then(() => {\n            const addPlaylistTracksUrl = `https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`;\n            fetch(addPlaylistTracksUrl, {\n              method: 'POST',\n              headers: headers,\n              body: JSON.stringify({\n                uris: trackUris\n              })\n            });\n          })\n      })\n  }\n}\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}