{"ast":null,"code":"var _jsxFileName = \"/Users/aamnv/js/reactjs/c-fdev/jammming/src/Components/App/App.js\";\nimport React from 'react';\nimport './App.css';\nimport Playlist from '../Playlist/Playlist';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playListName: 'New Playlist',\n      playListTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n  }\n\n  savePlayList() {\n    const trackURIs = this.state.playListTracks.map(playListTrack => playListTrack.uri);\n    Spotify.savePlayList(this.state.playListName, trackURIs);\n    this.setState({\n      searchResults: []\n    });\n    this.updatePlayListName('New Playlist');\n  }\n\n  addTrack(track) {\n    if (this.state.playListTracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    } else {\n      this.setState({\n        playListTracks: this.state.playListTracks.push(track)\n      });\n    }\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playListTracks;\n    tracks = tracks.filter(current => current.id !== track.id);\n    this.setState({\n      playListTracks: tracks\n    });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({\n      playListName: name\n    });\n  }\n\n  search(searchTerm) {\n    Spotify.search(searchTerm).then(results => this.setState({\n      searchResults: results\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Ja\", React.createElement(\"span\", {\n      className: \"highlight\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"mmm\"), \"ing\"), React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(SearchBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"App-playlist\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(SearchResults, {\n      searchResults: this.state.searchResults,\n      onAdd: this.addTrack,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(Playlist, {\n      playListName: this.state.playListName,\n      playListTracks: this.state.playListTracks,\n      onRemove: this.removeTrack,\n      onNameChange: this.updatePlaylistName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/aamnv/js/reactjs/c-fdev/jammming/src/Components/App/App.js"],"names":["React","Playlist","SearchBar","SearchResults","Spotify","App","Component","constructor","props","state","searchResults","playListName","playListTracks","addTrack","bind","removeTrack","updatePlaylistName","savePlayList","trackURIs","map","playListTrack","uri","setState","updatePlayListName","track","find","savedTrack","id","push","tracks","filter","current","name","search","searchTerm","then","results","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Playlist from '../Playlist/Playlist'\nimport SearchBar from '../SearchBar/SearchBar'\nimport SearchResults from '../SearchResults/SearchResults'\nimport Spotify from '../../util/Spotify'\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playListName: 'New Playlist',\n      playListTracks: []\n    }\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n  }\n\n  savePlayList() {\n    const trackURIs = this.state.playListTracks.map(playListTrack => playListTrack.uri);\n    Spotify.savePlayList(this.state.playListName, trackURIs);\n\n    this.setState({searchResults: []});\n    this.updatePlayListName('New Playlist');\n  }\n\n  addTrack(track) {\n    if (this.state.playListTracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    } else {\n      this.setState({playListTracks: this.state.playListTracks.push(track)});\n    }\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playListTracks;\n    tracks = tracks.filter(current => current.id !== track.id);\n    this.setState({playListTracks: tracks});\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playListName: name});\n  }\n\n  search(searchTerm) {\n    Spotify.search(searchTerm)\n      .then(results => this.setState({searchResults: results}))\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack} />\n            <Playlist \n              playListName={this.state.playListName} \n              playListTracks={this.state.playListTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}