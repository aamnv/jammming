{"ast":null,"code":"let accessToken;\nconst clientID = '02e90f8fca6543a8beebe5ca56462a41';\nconst redirectURI = 'http://localhost:3000/';\nconst getAccessTokenURL = \"https://accounts.spotify.com/authorize?client_id=\".concat(clientID, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectURI);\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      let accessToken = accessTokenMatch[1];\n      let expirationTime = expiresInMatch[1];\n      window.setTimeout(() => accessToken = '', expirationTime * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      window.location = getAccessTokenURL;\n    }\n  },\n\n  search(term) {\n    accessToken = Spotify.getAccessToken();\n\n    if (accessToken) {\n      const fetchURL = \"https://api.spotify.com/v1/search?type=track&q=\".concat(term);\n      const headerInfo = {\n        headers: {\n          Authorization: \"Bearer \".concat(accessToken)\n        }\n      };\n      return fetch(fetchURL, headerInfo).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n\n        throw new Error('Search request response failed!');\n      }, networkError => console.log(networkError.message)).then(jsonResponse => {\n        if (!jsonResponse.tracks) {\n          return [];\n        } else {\n          return jsonResponse.tracks.items.map(track => {\n            return {\n              id: track.id,\n              name: track.name,\n              artist: track.artists[0].name,\n              album: track.album.name,\n              uri: track.uri\n            };\n          });\n        }\n      });\n    } else {\n      console.log('Failure to get access token in search');\n    }\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/aamnv/js/reactjs/c-fdev/jammming/src/util/Spotify.js"],"names":["accessToken","clientID","redirectURI","getAccessTokenURL","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expirationTime","setTimeout","history","pushState","search","term","fetchURL","headerInfo","headers","Authorization","fetch","then","response","ok","json","Error","networkError","console","log","message","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri"],"mappings":"AAAA,IAAIA,WAAJ;AACA,MAAMC,QAAQ,GAAE,kCAAhB;AACA,MAAMC,WAAW,GAAG,wBAApB;AACA,MAAMC,iBAAiB,8DAAuDF,QAAvD,4EAAiIC,WAAjI,CAAvB;AAGA,MAAME,OAAO,GAAG;AAEfC,EAAAA,cAAc,GAAG;AAChB,QAAIL,WAAJ,EAAiB;AAChB,aAAOA,WAAP;AACA;;AAEC,UAAMM,gBAAgB,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,sBAA3B,CAAzB;AACA,UAAMC,cAAc,GAAGJ,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,oBAA3B,CAAvB;;AAEA,QAAIJ,gBAAgB,IAAIK,cAAxB,EAAwC;AACtC,UAAIX,WAAW,GAAGM,gBAAgB,CAAC,CAAD,CAAlC;AACA,UAAIM,cAAc,GAAGD,cAAc,CAAC,CAAD,CAAnC;AACAJ,MAAAA,MAAM,CAACM,UAAP,CAAkB,MAAMb,WAAW,GAAG,EAAtC,EAA0CY,cAAc,GAAG,IAA3D;AACAL,MAAAA,MAAM,CAACO,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C;AAEA,aAAOf,WAAP;AAED,KARD,MAQO;AACLO,MAAAA,MAAM,CAACC,QAAP,GAAiBL,iBAAjB;AACD;AACF,GArBa;;AAsBda,EAAAA,MAAM,CAACC,IAAD,EAAO;AAEXjB,IAAAA,WAAW,GAAGI,OAAO,CAACC,cAAR,EAAd;;AAEA,QAAIL,WAAJ,EAAiB;AACf,YAAMkB,QAAQ,4DAAqDD,IAArD,CAAd;AACA,YAAME,UAAU,GAAG;AAACC,QAAAA,OAAO,EAAE;AAACC,UAAAA,aAAa,mBAAYrB,WAAZ;AAAd;AAAV,OAAnB;AAEA,aAAOsB,KAAK,CAACJ,QAAD,EAAWC,UAAX,CAAL,CACJI,IADI,CAEHC,QAAQ,IAAK;AACX,YAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,iBAAOD,QAAQ,CAACE,IAAT,EAAP;AACD;;AACD,cAAM,IAAIC,KAAJ,CAAU,iCAAV,CAAN;AACD,OAPE,EAOAC,YAAY,IAAIC,OAAO,CAACC,GAAR,CAAYF,YAAY,CAACG,OAAzB,CAPhB,EASJR,IATI,CAUFS,YAAY,IAAI;AACf,YAAI,CAACA,YAAY,CAACC,MAAlB,EAA0B;AACxB,iBAAO,EAAP;AACD,SAFD,MAEO;AACL,iBAAOD,YAAY,CAACC,MAAb,CAAoBC,KAApB,CAA0BC,GAA1B,CAA8BC,KAAK,IAAI;AAC5C,mBAAO;AACLC,cAAAA,EAAE,EAAED,KAAK,CAACC,EADL;AAELC,cAAAA,IAAI,EAAEF,KAAK,CAACE,IAFP;AAGLC,cAAAA,MAAM,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd,EAAiBF,IAHpB;AAILG,cAAAA,KAAK,EAAEL,KAAK,CAACK,KAAN,CAAYH,IAJd;AAKLI,cAAAA,GAAG,EAAEN,KAAK,CAACM;AALN,aAAP;AAOD,WARM,CAAP;AASD;AACF,OAxBE,CAAP;AA0BD,KA9BD,MA+BK;AACHb,MAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACD;AACF;;AA5Da,CAAhB;AA+DA,eAAe1B,OAAf","sourcesContent":["let accessToken;\nconst clientID ='02e90f8fca6543a8beebe5ca56462a41';\nconst redirectURI = 'http://localhost:3000/';\nconst getAccessTokenURL = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`\n\n\nconst Spotify = {\n\n\tgetAccessToken() {\n\t\tif (accessToken) {\n\t\t\treturn accessToken;\n\t\t}\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      let accessToken = accessTokenMatch[1];\n      let expirationTime = expiresInMatch[1];\n      window.setTimeout(() => accessToken = '', expirationTime * 1000);\n      window.history.pushState('Access Token', null, '/');\n\n      return accessToken;\n\n    } else {\n      window.location= getAccessTokenURL\n    }\n  },\n  search(term) {\n\n    accessToken = Spotify.getAccessToken();\n\n    if (accessToken) {\n      const fetchURL = `https://api.spotify.com/v1/search?type=track&q=${term}`;\n      const headerInfo = {headers: {Authorization: `Bearer ${accessToken}`}};\n\n      return fetch(fetchURL, headerInfo)\n        .then(\n          response =>  {\n            if (response.ok) {\n              return response.json();\n            }\n            throw new Error('Search request response failed!');\n          }, networkError => console.log(networkError.message)\n        )\n        .then(\n           jsonResponse => {\n            if (!jsonResponse.tracks) {\n              return [];\n            } else {\n              return jsonResponse.tracks.items.map(track => {\n                return {\n                  id: track.id,\n                  name: track.name,\n                  artist: track.artists[0].name,\n                  album: track.album.name,\n                  uri: track.uri\n                }\n              });\n            }\n          }\n        )\n    }\n    else {\n      console.log('Failure to get access token in search');\n    }\n  }\n}\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}